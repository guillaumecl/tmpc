* mpd++
** TODO Add a way to wait for events
Basically we can send mpd_send_idle_mask and then poll the fd for data (using mpd_connection_get_fd)
Once we got data we can run mpd_recv_idle.

For this, we can add these methods in the mpd class:
  - start_idle  : starts an idle wait
  - stop_idle   : stops the current idle wait
  - idle_events : iterator to a list of events that occurred.

That will allow to keep using only one thread. We can also use mpd_run_idle or friends to poll in another thread.
** TODO Add playlist-oriented facilities
** TODO Document all fields and functions using the documentation of the mpd protocol
* Search mode
** TODO Add a mode to select and visualize playlists
Playlists and queues are similar. The search window probably can run mostly unmodified for playlist requests.
** TODO Allow to save playlists and modify playlists
We just need a way to save the result window to a playlist.
** TODO Allow to see in a db search if the songs are inside the current playlist
This is complicated since we don't have this information in the search result.

Maybe we could ask for the whole queue and remember its identifiers, but this could be wrong if the queue changes and we're not notified. We could then make an idle event to know when the queue changes, but this small feature would get somewhat complicated and add some unneeded overload…

We can also use send_queue_changes_brief to know if some queue information changed which would probably be quite efficient.
** DONE Remove a song from the queue
** DONE Allow to change the priority of a song to enable queue plays
** DONE Allow to visualize the priority of a song
Done but probably not satisfactory yet. Maybe a completely unrelated way to show it would be better (sort order ?)
* Display mode
** TODO Wait for events and show the next song if needed.
** TODO Show all file information in this window
All tags can be displayed.
We can also show the file URI and filename, the song lenqth, its priority…
